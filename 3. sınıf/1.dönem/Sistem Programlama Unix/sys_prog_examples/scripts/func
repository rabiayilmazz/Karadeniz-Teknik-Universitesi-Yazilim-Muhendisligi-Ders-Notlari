lspath() {
  OLDIFS="$IFS"
  IFS=:
  for DIR in $PATH ; do echo $DIR ; done
  IFS="$OLDIFS"
}

SetPath() {
  PATH=${PATH:="/sbin:/bin"};
  for _DIR in "$@"
  do
    if [ -d "$DIR" ] ; then PATH="$PATH":"$DIR" ; fi
  done
  export PATH
  unset _DIR
}

dirs() {
  # save IFS, then set it to : to access the
  # the items in _DIR_STACK individually.
  OLDIFS="$IFS"
  IFS=:
  # print each directory followed by a space
  for i in $_DIR_STACK
  do
    echo "$i \c"
    done
  # add a new line after all entries in _DIR_STACK
  # have been printed
  echo
  # restore IFS
  IFS="$OLDIFS"
}

pushd() {
  # set the requested directory, $REQ, to the first argument
  # If no argument is given, set REQ to .
  REQ="$1";
  if [ -z "$REQ" ] ; then REQ=. ; fi
  # if $REQ is a directory, cd to the directory
  # if the cd is successful update $_DIR_STACK
  # otherwise issue the appropriate error messages
  if [ -d "$REQ" ] ; then
    cd "$REQ" > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      _DIR_STACK="`pwd`:$_DIR_STACK" ; export _DIR_STACK ;
      dirs
    else
      echo "ERROR: Cannot change to directory $REQ." >&2
    fi
  else
    echo "ERROR: $REQ is not a directory." >&2
  fi
  unset REQ
}

_popd_helper() {
  # set the directory to pop to the first argument, if
  # this directory is empty, issue an error and return 1
  # otherwise get rid of POPD from the arguments
  POPD="$1"
  if [ -z "$POPD" ] ; then
    echo "ERROR: The directory stack is empty." >&2
    return 1
  fi
  shift
  # if any more arguments remain, reinitalize the directory
  # stack, and then update it with the remaining items,
  # otherwise set the directory stack to null
  if [ -n "$1" ] ; then
    _DIR_STACK="$1" ;
    shift ;
    for i in $@ ; do _DIR_STACK="$_DIR_STACK:$i" ; done
  else
    _DIR_STACK=
  fi
  # if POPD is a directory cd to it, otherwise issue
  # an error message
  if [ -d "$POPD" ] ; then
    cd "$POPD" > /dev/null 2>&1
    if [ $? -ne 0 ] ; then
      echo "ERROR: Could not cd to $POPD." >&2
    fi
    pwd
  else
    echo "ERROR: $POPD is not a directory." >&2
  fi
  export _DIR_STACK
  unset POPD
}

popd() {
  OLDIFS="$IFS"
  IFS=:
  _popd_helper $_DIR_STACK
  IFS="$OLDIFS"
}

function demo()
{
  echo "All Arguments to function demo(): $*"
  echo "First argument $1"
  echo "Second argument $2"
  echo "Third argument $3"
  return
}

#
# Call the function
#
call_demo() {
  demo -f foo bar
}

function cal()
{
  n1=$1
  op=$2
  n2=$3
  ans=0
  if [ $# -eq 3 ]; then
    ans=$(( $n1 $op $n2 ))
    echo "$n1 $op $n2 = $ans"
    return $ans
  else
    echo "Function cal requires atleast three args"
  fi
  return
}

call_cal() {
  cal 5 + 10
  cal 10 - 2
  cal 10 / 2
  echo $?
}
